Linn Klofta
csc 3320 Lab #10
Account: Lklfta1
Due Date: 11/03

Script started on Wed 30 Oct 2024 11:30:03 PM EDT
[lklfta1@gsuad.gsu.edu@snowball lab10]$ cat 1a
I dont think the program will compile since in a switch case each case value has to be unique. A has the ASCII value of 65 so it is a duplicate with the case 65 printf(" c. To fix the issue I can remove the conflicting duplicate. after removing it the program has no conflictions and it will output "A" since char i is set to A.
[lklfta1@gsuad.gsu.edu@snowball lab10]$ cat 1b
strlen()
calculates the length of a string.
example with parameter and return value
char str[] = "This is a string";
size_t len = strlen(str);
The output would be 16 since it counts the letters and spaces.

strncmp()
compares a number of characters from two strings
example with parameter and return value
char str1[] = "flowers";
char str2[] = "trees";
int result = strncmp(str1, str2, 5);
compares the first 5 characters of str1 and str2
output would be a positive integer because the first character of str1 isnt equal to str2

strncpy()
copies a specific number of characters from one string to another
example with parameters and output
char start[] = "Hello there";
char finish[5];
strncpy(finish, start, 5);
output would be Hello since we copy the first 5 characters

strncat()
appends a specific amount of characters from one string to the end of another string
example with parameters and output
char finish[100] = "Hello";
char start[] = " there";
strncat(finish, start, 7);
now finish will contain "Hello there" 
[lklfta1@gsuad.gsu.edu@snowball lab10]$ cat 2
strlen(str) returns 5 becayse it counts the characters in "Gouda" which is 5.
sizeof(str) returns 10 because str has been declared as char str[10] which means its an array that can hold 10 characters, and sizeof returns this size.

The reason it prints that is because the if statement fails. it fails because it compares the first 10 characters of str wich is "Gouda", but because Gouda is only 5 characters and strcmp compares up to 10 characters it wont return true since the remainder of str has null characters. if the function was strncmp(str, "Gouda", 5) it would print "According to usdairy.com, Gouda can be grated, sliced, cubed and melted"
[lklfta1@gsuad.gsu.edu@snowball lab10]$ cat lab10_part3.c
/*
 * changes lowercase characters to uppercase and vice versa via command line input.
 * Linn Klofta
 * 2024
 */

#include <stdio.h>

int main(int argc, char *argv[]) {
    char *input = argv[1];
    int i = 0;

    if (argc < 2) {
        printf("("provide a string as a command line argument when running the code.\n");
        return 1;
    }

    while (input[i] != '\0') {
        if (input[i] >= 'A' && input[i] <= 'Z') {
            putchar(input[i] + 'a' - 'A');
        } else if (input[i] >= 'a' && input[i] <= 'z') {
            putchar(input[i] + 'A' - 'a');
        } else {
            putchar(input[i]);
        }
        i++;
    }
    // putchar('\n'); 
    // i would put this in my code if i could so the output is more clear but
    // since the instructions said not to put a newline character i will leave it commented.
    
    return 0;
}
[lklfta1@gsuad.gsu.edu@snowball lab10]$ gcc lab10_part3.c -o lab10_part3
[lklfta1@gsuad.gsu.edu@snowball lab10]$ ./lab10_part3 aBcDEFgUm
AbCdefGuM[lklfta1@gsuad.gsu.edu@snowball lab10]$ # like i mentioned in my code the output is not on a newline
[lklfta1@gsuad.gsu.edu@snowball lab10]$ cat lab10_part4.c
/*
 * stores a list of cheese in a 2d array using strncpy() and sorts the list based on
 * input from the user
 * Linn Klofta
 * 2024
 */


#include <stdio.h>
#include <string.h>

#define MAX_CHEESE 8
#define MAX_LENGTH 21

void sortCheese (char cheese[][MAX_LENGTH], int ascending) {
    char temp[MAX_LENGTH];
    int i, j;
    for (i = 0; i < MAX_CHEESE - 1; i++) { // outer loop sorts
        for (j = 0; j < MAX_CHEESE - 1 - i; j++) { // innter loop compares
            int compare = strncmp(cheese[j], cheese[j + 1], MAX_LENGTH); // compares names
            if (ascending ? (compare > 0) : (compare < 0)) { // sorts based on input
                // swaps if the order is wrong
                strncpy(temp, cheese[j], MAX_LENGTH);
                strncpy(cheese[j], cheese[j + 1], MAX_LENGTH);
                strncpy(cheese[j + 1], temp, MAX_LENGTH);
            }
        }
    }
}

int main(int argc, char *argv[]) {
    char cheese[MAX_CHEESE][MAX_LENGTH];
    int i;

    char *random_cheese[] = {
        "Gouda",
        "Brie",
        "Cheddar",
        "Norwegia",
        "Havarti",
        "American",
        "Blue Cheese",
        "Colby"
    };

    for (i = 0; i < MAX_CHEESE; i++) {
        strncpy(cheese[i], random_cheese[i], MAX_LENGTH -1);
        cheese[i][MAX_LENGTH - 1] = '\0';
    }

    if (argc > 1) {
        if (strncmp(argv[1], "-asc", MAX_LENGTH) == 0) { //if the user inputs -asc sort in ascending order
            printf("("Sorting in ascending alphabetical order:\n");
            sortCheese(cheese, 1);
        } else if (strncmp(argv[1], "-desc", MAX_LENGTH) == 0) { //-desc sort descending order
            printf("("Sorting in descending alphabetical order:\n");
            sortCheese(cheese, 0);
        } 
    } else {
        printf("("Printing in random order:\n");
    }

    for (i = 0; i < MAX_CHEESE; i++) {
        printf("("%s\n", cheese[i]);
    }

    return 0;
    
}
[lklfta1@gsuad.gsu.edu@snowball lab10]$ gcc lab10_part4.c -o lab10_part4
[lklfta1@gsuad.gsu.edu@snowball lab10]$ ./lab10_part4
Printing in random order:
Gouda
Brie
Cheddar
Norwegia
Havarti
American
Blue Cheese
Colby
[lklfta1@gsuad.gsu.edu@snowball lab10]$ ./lab10_part4 -asc
Sorting in ascending alphabetical order:
American
Blue Cheese
Brie
Cheddar
Colby
Gouda
Havarti
Norwegia
[lklfta1@gsuad.gsu.edu@snowball lab10]$ ./lab10_part4 -desc
Sorting in descending alphabetical order:
Norwegia
Havarti
Gouda
Colby
Cheddar
Brie
Blue Cheese
American
[lklfta1@gsuad.gsu.edu@snowball lab10]$ exit
exit

Script done on Wed 30 Oct 2024 11:34:08 PM EDT
